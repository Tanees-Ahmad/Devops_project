name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Cache Job
  cache:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Node modules
        id: cache
        uses: actions/cache@v3
        with:
          path: ./project/node_modules  # Adjusted to the node_modules path within the project folder
          key: ${{ runner.os }}-node-modules-${{ hashFiles('project/package-lock.json') }}  # Adjusted for package-lock in the project folder
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: |
          cd project  # Navigate to the project folder
          npm ci  # Use npm ci for consistent installs

      - name: Run lint
        run: |
          cd project  # Navigate to the project folder
          npx eslint . || echo "ESLint completed with offenses"


  # Job to build the Docker images
  build:
    runs-on: ubuntu-latest
    needs: cache
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image (App)
      run: |
        docker build -t tanees012/app:${{ github.sha }} -f ./project/Dockerfile ./project
        docker push tanees012/app:${{ github.sha }}

      
  # Job to run Unit Tests
  test:
    runs-on: ubuntu-latest
    needs: [build,cache]
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

    - name: Install dependencies
      working-directory: ./project
      run: npm install

    - name: Run Unit Tests (add sample test if not present)
      working-directory: ./project
      run: npm test

      
  # Job to run Linter (Eslint)
  # Lint Job
# Lint Job
  lint:
    runs-on: ubuntu-latest
    needs: cache
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.20.4' # Ensure this matches your project's Node.js version

    - name: Install dependencies
      run: |
        cd project # Navigate to the directory containing package.json
        npm install

    - name: Run ESLint
      run: |
        cd project # Ensure we're in the right directory
        npx eslint . || echo "ESLint completed with offenses"


      
  # Job to run Static Application Security Testing (SAST)
# SAST Job

  sast:
    runs-on: ubuntu-latest
    needs: cache
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Semgrep
      run: |
        python3 -m pip install --upgrade pip
        pip install semgrep

    - name: Run Semgrep for SAST
      run: semgrep --config=auto --output=semgrep-report.json || echo "Semgrep did not complete successfully" cat semgrep-report.json || echo "No report file found."

    - name: Upload Semgrep Report
      uses: actions/upload-artifact@v3
      with:
        name: semgrep-report
        path: semgrep-report.json    
        
# Job to upload test results as artifacts
  upload-test-results:
    needs: test  # This ensures the upload job runs after the 'test' job
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results  # This is the artifact's name
        path: ./project/test-report.xml # Path to the directory where test results are stored

